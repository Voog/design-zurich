// CUSTOM MIXINS
// Comment out the "_mixins.scss" partial in the "main.scss" file if not used.

// HYPHENATE
@mixin hyphenate($boolean) {
  @if $boolean == true {
    word-break: break-word;
    word-wrap: break-word;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    hyphens: auto;
  } @else {
    word-break: normal;
    word-wrap: normal;
    -webkit-hyphens: none;
    -moz-hyphens: none;
    -ms-hyphens: none;
    hyphens: none;
  }
}

// BOXES
@mixin box-shadow($top, $left, $blur, $color, $inset:"") {
  box-shadow: $top $left $blur $color #{$inset};
}
@mixin no-box-shadow($value: none) {
  box-shadow: $value;
}

// COLORS
@mixin bg($color, $opacity: 1) {
  @if $opacity == 1 {
    background-color: rgba($color, $opacity);
  } @else {
    background-color: $color;
    background-color: rgba($color, $opacity);
  }
}

@mixin color($color, $opacity: 1) {
  @if $opacity == 1 {
    color: rgba($color, $opacity);
  } @else {
    color: $color;
    color: rgba($color, $opacity);
  }
}

@mixin fill($color, $opacity: 1) {
  @if $opacity == 1 {
    fill: rgba($color, $opacity);
  } @else {
    fill: $color;
    fill: rgba($color, $opacity);
  }
}

// BORDERS
@mixin border($side, $width, $style, $color, $opacity: 1) {
  @if $side == 'all' {
    @if $opacity == 1 {
      border: $width $style rgba($color, $opacity);
    } @else {
      border: $width $style $color;
      border: $width $style rgba($color, $opacity);
    }
  } @else {
    @if $opacity == 1 {
      border-#{$side}: $width $style rgba($color, $opacity);
    } @else {
      border-#{$side}: $width $style $color;
      border-#{$side}: $width $style rgba($color, $opacity);
    }
  }
}

// PERSPECTIVE
@mixin perspective($value: 1000) {
  -webkit-perspective: $value;
  -webkit-backface-visibility: hidden;
}

// WEBKIT INPUT BUTTON STYLE RESET
@mixin inputiosreset {
  -webkit-appearance: none;
  -webkit-border-radius: 0;
          border-radius: 0;
}

// MEDIA QUERY
@mixin query($value: $tablet-1, $screen: 'max-width') {
  @media screen and ($screen: $value) {
    @content;
  }
}

@mixin querymin($value) {
  @media screen and (min-width: $value + 1px) {
    @content;
  }
}

@mixin queryminmax($minvalue, $maxvalue) {
  @media screen and (min-width: $minvalue + 1px) and (max-width: $maxvalue) {
    @content;
  }
}

// REM CALC
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);
  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }
  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}

@mixin rem-fallback($property, $value) {
  $pxValue: $value;
  $remValue: rem-calc($value);

  #{$property}: $pxValue;
  #{$property}: $remValue;
}

// BUTTONS
@mixin button {
  margin: 0;
  padding: 0;
  background: none;
  border: none;
  cursor: pointer;

  &:focus {
    outline: none;
  }

  &::-moz-focus-inner {
    padding: 0;
    border: none;
  }
}
